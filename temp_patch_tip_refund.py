from pathlib import Path
path = Path('app/routes.py')
text = path.read_text(encoding='utf-8')
old_calc = "            charge_left = _remaining_on_pi_strict(pi_id)\n            can_for_pi_now = max(0, min(cap_for_pi, charge_left))\n            if can_for_pi_now <= 0:\n                continue\n\n\n            amt = min(remaining_overall, can_for_pi_now)\n            try:\n                idem = f\"refund:v3:{appointment_id}:{pi_id}:{amt}:before:{can_for_pi_now}\"\n                tip_refund_kwargs = {\n                    \"payment_intent\": pi_id,\n                    \"amount\": amt,\n                    \"idempotency_key\": idem,\n                    \"metadata\": {\n                        \"appointment_id\": str(appointment_id),\n                        \"bucket\": \"tip\",\n                        \"reason\": reason or \"tip_refund\",\n                    },\n                }\n                # By default we do not refund the application fee for tip buckets unless explicitly requested\n                if acct and refund_platform_fee:\n                    tip_refund_kwargs[\"refund_application_fee\"] = True\n"
new_calc = "            charge_left = _remaining_on_pi_strict(pi_id)\n            can_for_pi_now = max(0, min(cap_for_pi, charge_left))\n            if can_for_pi_now <= 0:\n                continue\n\n\n            tip_charge_app_fee = None\n            tip_charge_info = _remaining_by_charge(pi_id)\n            if isinstance(tip_charge_info, tuple) and len(tip_charge_info) >= 5:\n                tip_charge_app_fee = tip_charge_info[4]\n\n            amt = min(remaining_overall, can_for_pi_now)\n            try:\n                idem = f\"refund:v3:{appointment_id}:{pi_id}:{amt}:before:{can_for_pi_now}\"\n                tip_refund_kwargs = {\n                    \"payment_intent\": pi_id,\n                    \"amount\": amt,\n                    \"idempotency_key\": idem,\n                    \"metadata\": {\n                        \"appointment_id\": str(appointment_id),\n                        \"bucket\": \"tip\",\n                        \"reason\": reason or \"tip_refund\",\n                    },\n                }\n                # By default we do not refund the application fee for tip buckets unless explicitly requested\n                if acct and refund_platform_fee and (tip_charge_app_fee or 0) > 0:\n                    tip_refund_kwargs[\"refund_application_fee\"] = True\n                elif acct and refund_platform_fee and (tip_charge_app_fee or 0) == 0:\n                    current_app.logger.info(\"[refund:tip stripe] charge has no application_fee_amount; skipping refund_application_fee\")\n"
if old_calc not in text:
    raise SystemExit('tip refund block not found')
text = text.replace(old_calc, new_calc, 1)

path.write_text(text, encoding='utf-8')
